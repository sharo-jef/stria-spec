name: Auto Label and Assign

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  label-and-assign:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto label proposals
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber
            });

            const proposalFiles = files.filter(file => 
              file.filename.startsWith('proposals/') && 
              file.filename.endsWith('.md') &&
              file.filename !== 'proposals/README.md' &&
              file.filename !== 'proposals/0000-template.md'
            );

            const labels = [];

            if (proposalFiles.length > 0) {
              labels.push('proposal');
              
              // Check if it's a new proposal
              const newProposals = proposalFiles.filter(file => file.status === 'added');
              if (newProposals.length > 0) {
                labels.push('new-proposal');
              }
              
              // Check if it's updating an existing proposal
              const modifiedProposals = proposalFiles.filter(file => file.status === 'modified');
              if (modifiedProposals.length > 0) {
                labels.push('proposal-update');
              }
            }

            // Check for documentation changes
            const docFiles = files.filter(file => 
              file.filename.startsWith('docs/') && 
              file.filename.endsWith('.md')
            );

            if (docFiles.length > 0) {
              labels.push('documentation');
            }

            // Check for GitHub workflow changes
            const workflowFiles = files.filter(file => 
              file.filename.startsWith('.github/')
            );

            if (workflowFiles.length > 0) {
              labels.push('meta');
            }

            // Add labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels
              });
            }

      - name: Comment on new proposals
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber
            });

            const proposalFiles = files.filter(file => 
              file.filename.startsWith('proposals/') && 
              file.filename.endsWith('.md') &&
              file.filename !== 'proposals/README.md' &&
              file.filename !== 'proposals/0000-template.md'
            );

            if (proposalFiles.length > 0) {
              const comment = [
                "## ðŸ“‹ Proposal Review Guidelines",
                "",
                "Thank you for submitting a proposal! Here are some guidelines for reviewers:",
                "",
                "### Review Checklist",
                "- Format: Proposal follows the template structure",
                "- Clarity: Problem and solution are clearly described",
                "- Motivation: The need for this feature is well justified",
                "- Examples: Practical examples are provided",
                "- Compatibility: Backward compatibility is addressed",
                "- Implementation: Implementation considerations are discussed",
                "- Alternatives: Alternative approaches are considered",
                "",
                "### Questions to Consider",
                "- Does this feature align with Stria's goals as a configuration language?",
                "- Are there any edge cases or potential issues?",
                "- Could this feature be implemented differently?",
                "- Are there any missing use cases or examples?",
                "",
                "### Community Input Welcome",
                "All community members are encouraged to provide feedback on proposals. Your input helps shape the language!",
                "",
                "*This comment was automatically generated. Please review the proposal and provide your feedback.*"
              ].join("\\n");
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Welcome new contributors
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const author = context.payload.pull_request.user.login;

            // Check if this is the author's first contribution
            try {
              const { data: contributions } = await github.rest.repos.listContributors({
                owner,
                repo
              });
              
              const isFirstContribution = !contributions.some(contributor => 
                contributor.login === author
              );
              
              if (isFirstContribution) {
                const welcomeComment = [
                  "## ðŸŽ‰ Welcome to the Stria Community!",
                  "",
                  "Thank you for your first contribution to the Stria language specification!",
                  "",
                  "### Getting Started",
                  `- Review our [Contributing Guide](https://github.com/${owner}/${repo}/blob/master/CONTRIBUTING.md)`,
                  "- Check out the [Language Specification](https://sharo-jef.github.io/stria-spec/)",
                  `- Join discussions in our [GitHub Discussions](https://github.com/${owner}/${repo}/discussions)`,
                  "",
                  "### What Happens Next?",
                  "1. **Review Process**: Maintainers and community members will review your contribution",
                  "2. **Feedback**: You may receive feedback or requests for changes",
                  "3. **Iteration**: Feel free to update your contribution based on feedback",
                  "4. **Merge**: Once approved, your contribution will be merged",
                  "",
                  "### Questions?",
                  "If you have any questions, don't hesitate to ask in this PR or open a discussion.",
                  "",
                  "Welcome aboard! ðŸš€",
                  "",
                  "*This comment was automatically generated for first-time contributors.*"
                ].join("\\n");
                
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: welcomeComment
                });
              }
            } catch (error) {
              console.log('Could not check contributor status:', error.message);
            }
